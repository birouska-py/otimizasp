services:

# INGESTION
  #NIFI
  nifi:
    image: apache/nifi:${NIFI_VERSION}
    container_name: nifi-otmzsp
    hostname: nifi-otmzsp
    networks:
      - otmzsp_network
    volumes:
      - ./volumes/nifi/util:/util
      - ./volumes/nifi/util/jar:/util/jar
      - ./volumes/nifi/conf:/opt/nifi/nifi-current/conf
    environment:
      NIFI_WEB_HTTP_PORT: "9090"
      NIFI_WEB_HTTPS_HOST: "nifi"
      TZ: "America/Sao_Paulo"
    command: >
      sh -c "ln -snf /usr/share/zoneinfo/$$TZ /etc/localtime && echo $$TZ > /etc/timezone"
    ports:
      - 49090:9090
    deploy:
      resources:
        limits:
          memory: 2g
#STORAGE
  # DATA LAKE
  minio-otmzsp:
    image: minio/minio:${MINIO_VERSION}
    container_name: minio-otmzsp
    networks:
      - otmzsp_network
    entrypoint: sh
    command: '-c ''mkdir -p /minio_data/raw && mkdir -p /minio_data/trusted && minio server /minio_data --console-address ":9001"'''
    ports:
      - "49000:9000"
      - "49001:9001"
    hostname: minio-otmzsp
    environment:
      MINIO_ROOT_USER: admin
      MINIO_ROOT_PASSWORD: minioadmin
    volumes:
      - ./volumes/minio/data:/data
    healthcheck:
      test: ["CMD", "mc", "ready", "local"]
      interval: 5s
      timeout: 5s
      retries: 5

#PROCESS
  # SPARK MASTER
  spark-master-otmzsp:
    image: apache/spark:${SPARK_VERSION}
    container_name: spark-master-otmzsp
    networks:
      - otmzsp_network
    environment:
      - SPARK_MODE=master
      - SPARK_MASTER_HOST=spark-master-otmzsp
      - SPARK_NO_DAEMONIZE=true
      - TZ=America/Sao_Paulo
    ports:
      - "7077:7077"
      - "8080:8080"
    volumes:
      - ./volumes/spark/util:/util
    deploy:
      resources:
        limits:
          memory: 2g
    command: >
      /opt/spark/bin/spark-class org.apache.spark.deploy.master.Master

  # SPARK WORKER
  spark-worker-otmzsp:
    image: apache/spark:${SPARK_VERSION}
    container_name: spark-worker-otmzsp
    networks:
      - otmzsp_network
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master-otmzsp:7077
      - SPARK_WORKER_MEMORY=1g
      - SPARK_NO_DAEMONIZE=true
      - TZ=America/Sao_Paulo
    ports:
      - "8081:8081"
    volumes:
      - ./volumes/spark/util:/util
    deploy:
      resources:
        limits:
          memory: 1g
    command: >
      /opt/spark/bin/spark-class org.apache.spark.deploy.worker.Worker spark://spark-master-otmzsp:7077

  #JUPYTER
  jupyter-otmzsp:
    image: jupyter/pyspark-notebook:${JUPYTER_VERSION}
    container_name: jupyter-otmzsp
    networks:
      - otmzsp_network
    ports:
      - "8888:8888"  # Porta para acessar o Jupyter
      - 4040:4040
      - 4041:4041
      - 4042:4042
      - 4043:4043
    environment:
      JUPYTER_TOKEN: ""  # Desabilita o token
    volumes:
      - ../notebooks:/home/jovyan/work  # Para notebooks
    command: >
      start-notebook.sh --NotebookApp.token='' --NotebookApp.password=''
      
# DATA ACCESS
  #POSTGRES
  postgres-otmzsp:
    container_name: postgres-otmzsp
    hostname: postgres-otmzsp
    image: postgres:${POSTGRES_VERSION}
    networks:
      - otmzsp_network
    environment:
      POSTGRES_USER: "admin"
      POSTGRES_PASSWORD: "admin"
      POSTGRES_DB: metastore
      PGDATA: "/data/postgres"
    volumes:
       - ./volumes/postgres/data:/data/postgres
    ports:
      - "5432:5432"
    command:
       - "postgres"
       - "-c"
       - "wal_level=logical"
       - "-c"
       - "max_replication_slots=4"
       - "-c"
       - "max_wal_senders=4"
       
  #HIVE
  metastore-otmzsp:
    image: apache/hive:3.1.3
    #image: fjardim/mds-hive-metastore
    platform: linux/amd64
    container_name: metastore-otmzsp
    user: root
    networks:
      - otmzsp_network
    environment:
      AWS_ACCESS_KEY_ID: datalake
      AWS_SECRET_ACCESS_KEY: datalake
      HIVE_CUSTOM_CONF_DIR: "/hive_custom_conf"
      SERVICE_NAME: metastore
      HIVE_METASTORE_DB_TYPE: postgres
      HIVE_METASTORE_DB_HOST: postgres-otmzsp
      HIVE_METASTORE_DB_NAME: metastore
      HIVE_METASTORE_DB_USER: admin
      HIVE_METASTORE_DB_PASSWORD: admin
      DB_DRIVER: postgres 
      SERVICE_OPTS: "-Djavax.jdo.option.ConnectionDriverName=org.postgresql.Driver -Djavax.jdo.option.ConnectionURL=jdbc:postgresql://postgres-otmzsp:5432/metastore -Djavax.jdo.option.ConnectionUserName=admin -Djavax.jdo.option.ConnectionPassword=admin" 
    volumes:
      - ./volumes/hive/meta:/opt/hive/data/warehouse      
      - ./volumes/hive/conf:/opt/hive/conf
      - ./volumes/util:/util
      - ./volumes/hive/util/lib/postgresql-42.7.1.jar:/opt/hive/lib/postgresql-42.7.1.jar
    depends_on:
      - postgres-otmzsp
    command: ["/bin/bash", "-c", "/opt/hive/bin/schematool -dbType postgres -initSchema; /opt/hive/bin/hive --service metastore"]
    ports:
      - "9083:9083"
  #PRESTO

# DATA VIZUALIZATION   
  # elasticsearch   
  elasticsearch-otmzsp:
    image: elasticsearch:${ELASTICSEARCH_VERSION}
    container_name: elasticsearch-otmzsp
    hostname: elasticsearch-otmzsp
    ports:
      - "49200:9200"
      - "49300:9300"
    networks:
      - otmzsp_network
    environment:
      discovery.type: "single-node"
      ES_JAVA_OPTS: "-Xms2g -Xmx2g"
      #ELASTIC_PASSWORD: "12345"
      xpack.security.enabled: "false"
    volumes:
      - ./volumes/elasticsearch/esdata:/usr/share/elasticsearch/data
    healthcheck:
      interval: 1s
      retries: 3
      start_period: 20s
      test: curl -sS --fail http://elasticsearch-otmzsp:9200/_cluster/health?wait_for_status=yellow&timeout=0s
      timeout: 5s
  
  # Kibana    
  kibana-otmzsp:
    image: kibana:${KIBANA_VERSION}
    container_name: kibana-otmzsp
    hostname: kibana-otmzsp
    ports:
      - "45601:5601"
    networks:
      - otmzsp_network
    volumes:
      - ./volumes/kibana/data:/usr/share/kibana/data
    environment:
      ELASTICSEARCH_HOSTS: "http://elasticsearch-otmzsp:9200"
      #ELASTICSEARCH_USERNAME: "elastic"
      #ELASTICSEARCH_PASSWORD: "12345"
      #ELASTICSEARCH_SERVICEACCOUNTTOKEN: "GgXkNtUyT2CjF5k_488JcA"
    depends_on:
      elasticsearch-otmzsp:
        condition: service_healthy

#NETWORKS
networks:
  otmzsp_network:
    name: otmzsp-network
    driver: bridge